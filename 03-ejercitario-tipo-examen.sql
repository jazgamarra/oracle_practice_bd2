-- Altere la tabla de artículos para agregar lo siguiente
ALTER TABLE B_ARTICULOS ADD  
TIPO_ARTICULO VARCHAR2(1) DEFAULT 'M' CHECK(TIPO_ARTICULO IN ('M', 'P', 'I')); 

-- Crear tabla ex_insumos 
CREATE TABLE EX_INSUMOS (
	ID_PRODUCTO NUMBER(8), 
	ID_INSUMO NUMBER(8), 
	PROPORCION NUMBER(8) DEFAULT 0, 
	CONSTRAINT ex_insumos_PK PRIMARY KEY (ID_PRODUCTO, ID_INSUMO),
	
	CONSTRAINT ex_insumos_fk1 FOREIGN KEY(ID_PRODUCTO)
	REFERENCES B_ARTICULOS(ID), 
	
	CONSTRAINT ex_insumos_fk2 FOREIGN KEY(ID_INSUMO)
	REFERENCES B_ARTICULOS(ID) 
); 

-- Crear tabla ex_produccion 
CREATE TABLE EX_PRODUCCION (
	ID_PRODUCCION NUMBER(8) GENERATED BY DEFAULT ON NULL AS IDENTITY
		START WITH 1 MINVALUE 1
		MAXVALUE 9999999 INCREMENT BY 1
		NOCACHE NOCYCLE, 
	ID_PRODUCTO NUMBER(8), 
	CANTIDAD_A_PRODUCIR NUMBER(8) DEFAULT 1, 
	FECHA_ORDEN DATE DEFAULT SYSDATE , 
	FECHA_SALIDA DATE, 
	ESTADO VARCHAR(1) DEFAULT 'P' CHECK(ESTADO IN ('P', 'T', 'C')), 
	CONSTRAINT ex_produccion_pk PRIMARY KEY (ID_PRODUCCION), 
	CONSTRAINT ex_produccion_fk FOREIGN KEY (ID_PRODUCTO) REFERENCES B_ARTICULOS(ID)
); 


-- Crear tabla ex_mov_produccion 
CREATE TABLE EX_MOV_PRODUCCION (
	ID_PRODUCCION NUMBER(8),
	ID_INSUMO NUMBER (8), 
	CANTIDAD NUMBER(8) DEFAULT 1, 
	CONSTRAINT ex_mov_produccion_PK PRIMARY KEY (ID_PRODUCCION, ID_INSUMO),
	CONSTRAINT ex_mov_produccion_FK1 FOREIGN KEY (ID_PRODUCCION) REFERENCES EX_PRODUCCION(ID_PRODUCCION), 
	CONSTRAINT ex_mov_produccion_FK2 FOREIGN KEY (ID_INSUMO) REFERENCES B_ARTICULOS(ID) 
); 

/* 
Cree una vista materializada que permitirá generar el requerimiento de producción. La vista deberá mostrar 
todos aquellos artículos que no cubrirán el total de cantidad requerida para las órdenes de producción que 
aún no han tenido salida.
La vista se deberá generar de inmediato, y refrescar todos los días a las 6:00 am.
 */

CREATE MATERIALIZED VIEW v_req_ext 
	BUILD IMMEDIATE 
	REFRESH COMPLETE NEXT TRUNC (SYSDATE) + 30/24
AS
SELECT INS.ID_INSUMO, ART.NOMBRE, ART.STOCK_ACTUAL, 
	SUM(CASE WHEN FECHA_SALIDA IS NULL THEN MOV.CANTIDAD ELSE 0 END) AS CANTIDAD_REQUERIDA, 
	ART.STOCK_ACTUAL - SUM(CASE WHEN FECHA_SALIDA IS NULL THEN MOV.CANTIDAD ELSE 0 END) AS SALDO_FALTANTE, 
	MIN(PRO.FECHA_ORDEN) AS FECHA_REQUERIDA 
FROM EX_INSUMOS INS
JOIN B_ARTICULOS ART ON ART.ID = INS.ID_INSUMO
JOIN EX_MOV_PRODUCCION MOV ON MOV.ID_INSUMO = INS.ID_INSUMO
JOIN EX_PRODUCCION PRO ON PRO.ID_PRODUCTO = INS.ID_PRODUCTO
GROUP BY INS.ID_INSUMO, ART.NOMBRE, ART.STOCK_ACTUAL

/*
Con una sola sentencia, prepare un script para deshabilitar:
a) Todos aquellos constraints del tipo PK creados para las nuevas tablas.
b) Los constraints dependientes (FK) de dichas PKs.
Tips: Consulte el diccionario de datos para recuperar información acerca de los constraints.
 */

SELECT 'ALTER TABLE '||TABLE_NAME||' DISABLE CONSTRAINT '||CONSTRAINT_NAME||' CASCADE;'  
FROM DBA_CONSTRAINTS WHERE SUBSTR(TABLE_NAME,1,3)='EX_' AND CONSTRAINT_TYPE='P';


/*
 Crea un PL/SQL anónimo que:
1) Recibirá como parámetros el id de un producto, la cantidad a producir, y la fecha de la orden, realizando lo siguiente:
2) Verificará que el producto sea tal (El tipo de articulo debe ser producto, de lo contrario mostrará a un mensaje ‘No es un
producto’ y no continuará Si el producto no existe, dará un mensaje de error y finalizará.
3) Insertará un registro en la tabla EX_PRODUCCION asignando el ID de producción con el último valor + 1, en tanto que
el id_producto, la cantidad a producir y la fecha de la orden, se asignarán con los valores recibidos. Las demás columnas no
serán asignadas.

4) Consultará la tabla de insumos del producto (EX_INSUMOS) para el producto introducido. A partir de los registros
obtenidos, insertará los insumos requeridos para el movimiento de producción correspondiente
(EX_MOV_PRODUCCION). La cantidad requerida para la producción, se obtiene multiplicando la cantidad a producir por la proporción establecida en
insumos.

5) Terminada la inserción de los movimientos, confirmará la operación dando un mensaje de “Movimiento de producción
generado”. 
 */
DECLARE 
	v_id_producto EX_PRODUCCION.ID_PRODUCTO%TYPE := &v_id_producto;
	v_cantidad_producir EX_PRODUCCION.CANTIDAD_A_PRODUCIR%TYPE := &v_cantidad_producir;
	v_fecha_orden EX_PRODUCCION.FECHA_ORDEN%TYPE := &v_fecha_orden;
	v_tipo_articulo B_ARTICULOS.TIPO_ARTICULO%TYPE; 
	v_id_insumo EX_INSUMOS.ID_INSUMO%TYPE; 
	v_id_produccion EX_PRODUCCION.ID_PRODUCCION%TYPE;
BEGIN 
	SELECT ID INTO v_id_producto FROM B_ARTICULOS WHERE ID = v_id_producto; 
	SELECT TIPO_ARTICULO INTO v_tipo_articulo FROM B_ARTICULOS WHERE ID = v_id_producto; 
	SELECT NVL(MAX(ID_PRODUCCION),0) + 1 INTO v_id_produccion FROM EX_PRODUCCION;
	
	-- Validar si es un producto 
	IF v_tipo_articulo = 'P' THEN 
		INSERT INTO EX_PRODUCCION (ID_PRODUCTO, CANTIDAD_A_PRODUCIR, FECHA_ORDEN) 
		VALUES (v_id_producto, v_cantidad_producir, TO_DATE(	'&v_fecha_orden', 'DD/MM/YYYY')); 
		COMMIT; 
		
		INSERT INTO EX_MOV_PRODUCCION (ID_PRODUCCION, ID_INSUMO, CANTIDAD)
           SELECT v_id_produccion,
                  id_insumo,
                  (proporcion * NVL(v_cantidad_producir,0)) cantidad
             FROM EX_INSUMOS
            WHERE ID_PRODUCTO = v_id_producto;
		COMMIT; 
	ELSE 
		DBMS_OUTPUT.PUT_LINE('No es un producto');
	END IF; 
END; 
/ 





