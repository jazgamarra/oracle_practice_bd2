/*
 * 
 * Base de datos II 
 * Primer Examen Parcial 
 * 
 * Jazmin Maria del Lujan Gamarra Benitez 
 * jazgamarra@fpuna.edu.py 
 * 
 */

-------------------------------------------------------------------------------------------
-- TEMA 1 
-------------------------------------------------------------------------------------------

-- Crear tablespace T_SUCURSALES 
CREATE TABLESPACE T_SUCURSALES
LOGGING
DATAFILE 'C:\oradata\t_sucursales.dbf'
SIZE 100M REUSE
AUTOEXTEND ON NEXT 640 K MAXSIZE 200M;

-- Crear tabla D_MOVIMIENTO_SUCURSAL 
CREATE TABLE D_MOVIMIENTOS_SUCURSAL (
	COD_SUCURSAL NUMBER(2),
	ANIO NUMBER(4),
	DESC_SUCURSAL VARCHAR2(30),
	TOT_COMPRA NUMBER(12) DEFAULT 0 CHECK(TOT_COMPRA >= 0),
	TOT_VENTA NUMBER (12) DEFAULT 0 CHECK(TOT_VENTA >= 0),
	FECHA_CARGA DATE DEFAULT SYSDATE,
	USU_CARGA VARCHAR2(30) DEFAULT USER, 
	CONSTRAINT D_MOVIMIENTOS_PK PRIMARY KEY (COD_SUCURSAL, ANIO), 
	CONSTRAINT D_MOVIMIENTOS_FK FOREIGN KEY (COD_SUCURSAL) REFERENCES D_SUCURSAL(COD_SUCURSAL)
)
	-- Particionar segun el campo cod_sucursal 
PARTITION BY LIST (COD_SUCURSAL) (
	PARTITION CAPITAL VALUES (1, 2, 9) TABLESPACE T_SUCURSALES,
	PARTITION GRAN_ASU VALUES (3,4) TABLESPACE T_SUCURSALES,
	PARTITION INTERIOR VALUES (5,6,7,8,10) TABLESPACE T_SUCURSALES
);

-- Subquery para realizar el merge de poblado de las tablas 
SELECT SUC.COD_SUCURSAL, NVL(EXTRACT(YEAR FROM MOV.FECHA_OPERACION), 0) AS ANIO, SUC.DESC_SUCURSAL, 
	SUM(CASE WHEN MOV.COD_OPERACION = 2 THEN 
		DET.IMPORTE_OPERACION - DET.IMPORTE_DESCUENTO + DET.IMPORTE_RECARGO ELSE 0 END) TOT_COMPRA, 
	SUM(CASE WHEN MOV.COD_OPERACION = 1 THEN 
		DET.IMPORTE_OPERACION - DET.IMPORTE_DESCUENTO + DET.IMPORTE_RECARGO ELSE 0 END) TOT_VENTA
FROM D_MOVIMIENTO_OPERACIONES MOV 
	JOIN D_DETALLE_OPERACIONES DET ON MOV.ID_OPERACION = DET.ID_OPERACION 
	FULL OUTER JOIN D_SUCURSAL SUC ON SUC.COD_SUCURSAL = MOV.COD_SUCURSAL
WHERE MOV.ESTADO = 'A' OR EXTRACT(YEAR FROM MOV.FECHA_OPERACION) IS NULL
GROUP BY SUC.COD_SUCURSAL, EXTRACT(YEAR FROM MOV.FECHA_OPERACION), SUC.DESC_SUCURSAL; 

-- Realizar el merge y poblar las tablas :)
MERGE INTO D_MOVIMIENTOS_SUCURSAL MS 
USING ( SELECT SUC.COD_SUCURSAL, NVL(EXTRACT(YEAR FROM MOV.FECHA_OPERACION), 0) AS ANIO, SUC.DESC_SUCURSAL, 
			SUM(CASE WHEN MOV.COD_OPERACION = 2 THEN 
				DET.IMPORTE_OPERACION - DET.IMPORTE_DESCUENTO + DET.IMPORTE_RECARGO ELSE 0 END) TOT_COMPRA, 
			SUM(CASE WHEN MOV.COD_OPERACION = 1 THEN 
				DET.IMPORTE_OPERACION - DET.IMPORTE_DESCUENTO + DET.IMPORTE_RECARGO ELSE 0 END) TOT_VENTA
		FROM D_MOVIMIENTO_OPERACIONES MOV 
			JOIN D_DETALLE_OPERACIONES DET ON MOV.ID_OPERACION = DET.ID_OPERACION 
			FULL OUTER JOIN D_SUCURSAL SUC ON SUC.COD_SUCURSAL = MOV.COD_SUCURSAL
		WHERE MOV.ESTADO = 'A' OR EXTRACT(YEAR FROM MOV.FECHA_OPERACION) IS NULL
		GROUP BY SUC.COD_SUCURSAL, EXTRACT(YEAR FROM MOV.FECHA_OPERACION), SUC.DESC_SUCURSAL
	) SQ
ON (MS.COD_SUCURSAL = SQ.COD_SUCURSAL AND MS.ANIO = SQ.ANIO) 
WHEN MATCHED THEN 
	UPDATE SET MS.TOT_COMPRA = SQ.TOT_COMPRA, MS.TOT_VENTA = SQ.TOT_VENTA 
WHEN NOT MATCHED THEN 
	INSERT  (MS.COD_SUCURSAL, MS.ANIO, MS.DESC_SUCURSAL, MS.TOT_COMPRA, MS.TOT_VENTA) VALUES 
			(SQ.COD_SUCURSAL, SQ.ANIO, SQ.DESC_SUCURSAL, SQ.TOT_COMPRA, SQ.TOT_VENTA); 

-- Revisar datos de la tabla creada 
SELECT * FROM D_MOVIMIENTOS_SUCURSAL; 


-------------------------------------------------------------------------------------------
-- TEMA 2 
-------------------------------------------------------------------------------------------

-- Calcular el valor acumulado por cada producto 
SELECT PRO.DESC_PRODUCTO, SUM(DET.IMPORTE_OPERACION - DET.IMPORTE_DESCUENTO + DET.IMPORTE_RECARGO)
	FROM D_DETALLE_OPERACIONES DET 
	JOIN D_MOVIMIENTO_OPERACIONES MOV ON MOV.ID_OPERACION = DET.ID_OPERACION 
	JOIN D_PRODUCTOS PRO ON PRO.ID_PRODUCTO = DET.ID_PRODUCTO 
WHERE MOV.COD_OPERACION = 1 AND MOV.ESTADO = 'A' AND EXTRACT(MONTH FROM MOV.FECHA_OPERACION) = EXTRACT(MONTH FROM SYSDATE) - 1 
GROUP BY PRO.DESC_PRODUCTO ORDER BY 2 DESC; 

-- Calcular el valor acumulado por cada vendedor 
SELECT USU.NOMBRE_USUARIO, SUM(DET.IMPORTE_OPERACION - DET.IMPORTE_DESCUENTO + DET.IMPORTE_RECARGO)
	FROM D_DETALLE_OPERACIONES DET 
	JOIN D_MOVIMIENTO_OPERACIONES MOV ON MOV.ID_OPERACION = DET.ID_OPERACION 
	JOIN D_USUARIOS USU ON USU.ID_USUARIO = MOV.ID_USUARIO 
WHERE MOV.ESTADO = 'A' AND EXTRACT(MONTH FROM MOV.FECHA_OPERACION) = EXTRACT(MONTH FROM SYSDATE) - 1  
AND MOV.COD_OPERACION = 1 AND USU.ESTADO = 1 -- verificamos tambien que el vendedor siga activo 
GROUP BY USU.NOMBRE_USUARIO ORDER BY 2 DESC; 

-- Calcular la sucursal de mayor venta 
SELECT SUC.DESC_SUCURSAL, SUM(DET.IMPORTE_OPERACION - DET.IMPORTE_DESCUENTO + DET.IMPORTE_RECARGO)
	FROM D_DETALLE_OPERACIONES DET 
	JOIN D_MOVIMIENTO_OPERACIONES MOV ON MOV.ID_OPERACION = DET.ID_OPERACION 
	JOIN D_SUCURSAL SUC ON MOV.COD_SUCURSAL = SUC.COD_SUCURSAL 
WHERE MOV.COD_OPERACION = 1 AND MOV.ESTADO = 'A' AND EXTRACT(MONTH FROM MOV.FECHA_OPERACION) = EXTRACT(MONTH FROM SYSDATE) - 1  
GROUP BY SUC.DESC_SUCURSAL; 


-- Crear la vista materializada 
CREATE MATERIALIZED VIEW V_ESTADISTICA_MENSUAL
BUILD IMMEDIATE
REFRESH NEXT TRUNC(LAST_DAY(SYSDATE)+1) + 3/24 
AS
WITH TOT_PRODUCTOS AS (
		SELECT PRO.DESC_PRODUCTO, SUM(DET.IMPORTE_OPERACION - DET.IMPORTE_DESCUENTO + DET.IMPORTE_RECARGO) TOTAL
			FROM D_DETALLE_OPERACIONES DET 
			JOIN D_MOVIMIENTO_OPERACIONES MOV ON MOV.ID_OPERACION = DET.ID_OPERACION 
			JOIN D_PRODUCTOS PRO ON PRO.ID_PRODUCTO = DET.ID_PRODUCTO 
		WHERE MOV.COD_OPERACION = 1 AND MOV.ESTADO = 'A' AND EXTRACT(MONTH FROM MOV.FECHA_OPERACION) = EXTRACT(MONTH FROM SYSDATE) - 1 
		GROUP BY PRO.DESC_PRODUCTO
	), 
	TOT_VENDEDORES AS (
		SELECT USU.NOMBRE_USUARIO, SUM(DET.IMPORTE_OPERACION - DET.IMPORTE_DESCUENTO + DET.IMPORTE_RECARGO) TOTAL
			FROM D_DETALLE_OPERACIONES DET 
			JOIN D_MOVIMIENTO_OPERACIONES MOV ON MOV.ID_OPERACION = DET.ID_OPERACION 
			JOIN D_USUARIOS USU ON USU.ID_USUARIO = MOV.ID_USUARIO 
		WHERE MOV.ESTADO = 'A' AND EXTRACT(MONTH FROM MOV.FECHA_OPERACION) = EXTRACT(MONTH FROM SYSDATE) - 1  
		AND MOV.COD_OPERACION = 1 AND USU.ESTADO = 1 -- verificamos tambien que el vendedor siga activo 
		GROUP BY USU.NOMBRE_USUARIO
	),
	TOT_SUCURSALES AS (
		SELECT SUC.DESC_SUCURSAL, SUM(DET.IMPORTE_OPERACION - DET.IMPORTE_DESCUENTO + DET.IMPORTE_RECARGO) TOTAL
			FROM D_DETALLE_OPERACIONES DET 
			JOIN D_MOVIMIENTO_OPERACIONES MOV ON MOV.ID_OPERACION = DET.ID_OPERACION 
			JOIN D_SUCURSAL SUC ON MOV.COD_SUCURSAL = SUC.COD_SUCURSAL 
		WHERE MOV.COD_OPERACION = 1 AND MOV.ESTADO = 'A' AND EXTRACT(MONTH FROM MOV.FECHA_OPERACION) = EXTRACT(MONTH FROM SYSDATE) - 1  
		GROUP BY SUC.DESC_SUCURSAL
	)
SELECT 'Venta de mayor valor: ' || DESC_PRODUCTO CONCEPTO, TOTAL FROM TOT_PRODUCTOS WHERE TOTAL = (SELECT MAX(TOTAL) FROM TOT_PRODUCTOS) 
UNION 
SELECT 'Mejor vendedor: ' ||NOMBRE_USUARIO, TOTAL FROM TOT_VENDEDORES WHERE TOTAL = (SELECT MAX(TOTAL) FROM TOT_VENDEDORES)
UNION 
SELECT 'Sucursal de mayor venta: ' ||DESC_SUCURSAL, TOTAL FROM TOT_SUCURSALES WHERE TOTAL = (SELECT MAX(TOTAL) FROM TOT_SUCURSALES); 

-- Verificar la vista materializada creada 
SELECT * FROM V_ESTADISTICA_MENSUAL;  
	

-------------------------------------------------------------------------------------------
-- TEMA 3 
-------------------------------------------------------------------------------------------

DECLARE
	V_ID_PLANTILLA NUMBER := &V_ID_PLANTILLA; 
	V_NOMBRE_PLANTILLA D_PLANTILLA_ASIENTO.NOMBRE%TYPE; 
	V_ID_ASIENTO D_ASIENTO_CABECERA.ID_ASIENTO%TYPE; 
	V_IMPORTE NUMBER := &V_IMPORTE; 
BEGIN 
	-- Recuperar datos de la plantilla de asientos contables 
	BEGIN 
		SELECT NOMBRE INTO V_NOMBRE_PLANTILLA FROM D_PLANTILLA_ASIENTO WHERE ID_PLANTILLA = V_ID_PLANTILLA; 
	  	DBMS_OUTPUT.PUT_LINE('Plantilla: ' || V_ID_PLANTILLA || ' ' || V_NOMBRE_PLANTILLA);
  	EXCEPTION 
  		WHEN _FOUND THEN 
  			RAISE_APPLICATION_ERROR(-20001, 'No existe una plantilla con ese ID');
	END; 

	-- Insertar en la tabla d_asiento_cabecera 
	BEGIN 
		INSERT INTO D_ASIENTO_CABECERA (CONCEPTO, FECHA_ASIENTO) VALUES (V_NOMBRE_PLANTILLA, SYSDATE); 
		COMMIT; 
	EXCEPTION
           WHEN OTHERS THEN
               RAISE_APPLICATION_ERROR(-20002, 'Los datos no fueron insertados a d_asiento_cabecera :(. '||sqlerrm);
    END;
    
   -- Recuperar los datos del detalle de la plantilla
	SELECT MAX(ID_ASIENTO) INTO V_ID_ASIENTO FROM D_ASIENTO_CABECERA; 
	
    -- Insertar los datos en d_asiento_detalle
	BEGIN 
		INSERT ALL 
			INTO D_ASIENTO_DETALLE (ID_ASIENTO, CODIGO_CTA, SECUENCIA, DEBE_HABER, IMPORTE) VALUES 
			(V_ID_ASIENTO, CODIGO_CTA, SECUENCIA, DEBE_HABER, V_IMPORTE)
		 SELECT PDE.SECUENCIA, PDE.CODIGO_CTA, PDE.DEBE_HABER 
		 FROM D_PLANTILLA_DETALLE PDE  
		 WHERE PDE.ID_PLANTILLA = V_ID_PLANTILLA; 
		COMMIT; 
	EXCEPTION 
		 WHEN OTHERS THEN
               RAISE_APPLICATION_ERROR(-20003, 'Los datos no fueron insertados a d_asiento_detalle :(. '||sqlerrm);
    END; 
	-- Confirmar e imprimir en pantalla 
	DBMS_OUTPUT.PUT_LINE('Asiento ' || V_ID_PLANTILLA || ' generado.');
END; 
